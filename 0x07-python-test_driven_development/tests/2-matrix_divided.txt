def matrix_divided(matrix, div):
    """
    Divides all elements of a matrix.

    Args:
        matrix (list of lists): Matrix of integers or floats.
        div (int or float): Divisor.

    Returns:
        list of lists: New matrix with elements divided by div, rounded to 2 decimal places.

    Raises:
        TypeError: If matrix is not a list of lists of integers or floats, or if div is not a number.
        ZeroDivisionError: If div is equal to 0.

    Examples:
        >>> matrix_divided([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2)
        [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]
        
        >>> matrix_divided([[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]], 0.5)
        [[3.0, 5.0, 7.0], [9.0, 11.0, 13.0]]

        >>> matrix_divided([[1, 2, 3], [4, 5], [6, 7, 8]], 2)
        Traceback (most recent call last):
        ...
        TypeError: Each row of the matrix must have the same size

        >>> matrix_divided([[1, 2], [3, 4]], 0)
        Traceback (most recent call last):
        ...
        ZeroDivisionError: division by zero

        >>> matrix_divided([[1, 2], [3, 'a']], 2)
        Traceback (most recent call last):
        ...
        TypeError: matrix must be a matrix (list of lists) of integers/floats

        >>> matrix_divided([[1, 2], [3, 4]], 'a')
        Traceback (most recent call last):
        ...
        TypeError: div must be a number

        >>> matrix_divided([], 2)
        Traceback (most recent call last):
        ...
        TypeError: Each row of the matrix must have the same size
        >>> matrix_divided([[1,2,3]], 2)
        [[0.5, 1.0, 1.5]]

    """
    # Check if matrix is a list of lists of integers or floats
    if not all(isinstance(row, list) and all(isinstance(num, (int, float)) for num in row) for row in matrix):
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
    
    # Check if each row of the matrix has the same size
    row_lengths = {len(row) for row in matrix}
    if len(row_lengths) != 1:
        raise TypeError("Each row of the matrix must have the same size")
    
    # Check if div is a number (integer or float)
    if not isinstance(div, (int, float)):
        raise TypeError("div must be a number")
    
    # Check if div is not zero
    if div == 0:
        raise ZeroDivisionError("division by zero")
    
    # Perform division and round to 2 decimal places
    new_matrix = [[round(num / div, 2) for num in row] for row in matrix]
    
    return new_matrix

if __name__ == "__main__":
   import doctest
   doctest.testmod()
